library("ARI")
install.packages("ARI", dependencies = TRUE)
install.packages("ari", dependencies = TRUE)
lambdas <- c("10000.0", "1000.0", "100.0", "10.0", "1.0", "0.1", "0.01", "0.001", "0.0001", "1e-05", "0.0")
lambdas <- rev(lambdas)
cos_nmi <- c()
cos_ari <- c()
for(lambda in lambdas){
#file <- paste("result_wc_nmtf/lambda/cos/wc-nmtf_Z_l", lambda, ".csv", sep = "")
file <- paste("result_wc_nmtf/lambda/p_tra/wc-nmtf_Z_l", lambda, "_p_tra.csv", sep = "")
res_wc_nmtf <- read.csv(file, header = TRUE)
res_wc_nmtf <- t( normalize( t(res_wc_nmtf) ) )
label_res <- apply(res_wc_nmtf, MARGIN = 1, FUN=which.max)
t_nmi <- NMI(label_res, labelK)
t_ari <- ARI(label_res, labelK)
cos_nmi <- c(cos_nmi, t_nmi)
cos_ari <- c(cos_ari, t_ari)
}
for(lambda in lambdas){
#file <- paste("result_wc_nmtf/lambda/cos/wc-nmtf_Z_l", lambda, ".csv", sep = "")
file <- paste("result_wc_nmtf/lambda/p_tra/wc-nmtf_Z_l", lambda, "_p_tra.csv", sep = "")
res_wc_nmtf <- read.csv(file, header = TRUE)
res_wc_nmtf <- t( normalize( t(res_wc_nmtf) ) )
label_res <- apply(res_wc_nmtf, MARGIN = 1, FUN=which.max)
t_nmi <- NMI(label_res, labelK)
t_ari <- ARI(label_res, labelK)
cos_nmi <- c(cos_nmi, t_nmi)
cos_ari <- c(cos_ari, t_ari)
}
temp = c(1:10)
matrix(c, nrow = 5)
matrix(temp, nrow = 5)
t <- Sys.time()
t2 <- Sys.time()
t2 - t
temp <- t2 - t
temp
plot(temp)
?dist
?svg
setwd("/media/matthieu/Data/Matthieu/##Etude/#M1/S2/DataScience/Fashion-MNIST")
library("FactoMineR")
library("corrplot")
library("factoextra")
library("fields")
rec <- read.csv("decoded_images.csv")
dim(rec)
rec <- read.csv("decoded_images.csv", row.names = 1)
dim(rec)
sum(colSums(rec) == 0)
sum(rowSums(rec) == 0)
min(rec)
max(rec)
normalize <- function(x){
(x - min(x)) / (max(x) - min(x)) * 255
}
rec <- apply(rec, MARGIN = 1, FUN = normalize)
colors <- gray.colors(255)
for(i in 1:length(index)){
layout(matrix(c(1:2), ncol=2))
temp <- matrix(rec[,i], nrow = 28, byrow = TRUE)
image(temp, col = colors)
temp <- matrix(as.double(train_x[index[i],]), nrow = 28, byrow = TRUE)
image(temp, col = colors)
readline(prompt="Press [enter] to continue")
}
# Select one obs for each class
index <- c(2, 17, 6, 4, 20, 9, 19, 7, 24, 1)
for(i in 1:length(index)){
layout(matrix(c(1:2), ncol=2))
temp <- matrix(rec[,i], nrow = 28, byrow = TRUE)
image(temp, col = colors)
temp <- matrix(as.double(train_x[index[i],]), nrow = 28, byrow = TRUE)
image(temp, col = colors)
readline(prompt="Press [enter] to continue")
}
# load image files
load_image_file = function(filename) {
ret = list()
f = file(filename, 'rb')
readBin(f, 'integer', n = 1, size = 4, endian = 'big')
n    = readBin(f, 'integer', n = 1, size = 4, endian = 'big')
nrow = readBin(f, 'integer', n = 1, size = 4, endian = 'big')
ncol = readBin(f, 'integer', n = 1, size = 4, endian = 'big')
x = readBin(f, 'integer', n = n * nrow * ncol, size = 1, signed = FALSE)
close(f)
data.frame(matrix(x, ncol = nrow * ncol, byrow = TRUE))
}
# load label files
load_label_file = function(filename) {
f = file(filename, 'rb')
readBin(f, 'integer', n = 1, size = 4, endian = 'big')
n = readBin(f, 'integer', n = 1, size = 4, endian = 'big')
y = readBin(f, 'integer', n = n, size = 1, signed = FALSE)
close(f)
y
}
# load images
train_x = load_image_file("dataset/train-images-idx3-ubyte")
test_x  = load_image_file("dataset/t10k-images-idx3-ubyte")
# load labels
train_y = as.factor(load_label_file("dataset/train-labels-idx1-ubyte"))
test_y = as.factor(load_label_file("dataset/t10k-labels-idx1-ubyte"))
train_xy = cbind(train_x, train_y)
test_xy = cbind(test_x, test_y)
label_col = 785
dev.off()
for(i in 1:length(index)){
layout(matrix(c(1:2), ncol=2))
temp <- matrix(rec[,i], nrow = 28, byrow = TRUE)
image(temp, col = colors)
temp <- matrix(as.double(train_x[index[i],]), nrow = 28, byrow = TRUE)
image(temp, col = colors)
readline(prompt="Press [enter] to continue")
}
rec <- read.csv("decoded_images.csv", row.names = 1)
rec <- apply(rec, MARGIN = 1, FUN = normalize)
colors <- gray.colors(255)
for(i in 1:length(index)){
layout(matrix(c(1:2), ncol=2))
temp <- matrix(rec[,i], nrow = 28, byrow = TRUE)
image(temp, col = colors)
temp <- matrix(as.double(train_x[index[i],]), nrow = 28, byrow = TRUE)
image(temp, col = colors)
readline(prompt="Press [enter] to continue")
}
rec <- read.csv("decoded_images.csv", row.names = 1)
rec <- apply(rec, MARGIN = 1, FUN = normalize)
colors <- gray.colors(255)
for(i in 1:length(index)){
layout(matrix(c(1:2), ncol=2))
temp <- matrix(rec[,i], nrow = 28, byrow = TRUE)
image(temp, col = colors)
temp <- matrix(as.double(train_x[index[i],]), nrow = 28, byrow = TRUE)
image(temp, col = colors)
readline(prompt="Press [enter] to continue")
}
