library("ARI")
install.packages("ARI", dependencies = TRUE)
install.packages("ari", dependencies = TRUE)
lambdas <- c("10000.0", "1000.0", "100.0", "10.0", "1.0", "0.1", "0.01", "0.001", "0.0001", "1e-05", "0.0")
lambdas <- rev(lambdas)
cos_nmi <- c()
cos_ari <- c()
for(lambda in lambdas){
#file <- paste("result_wc_nmtf/lambda/cos/wc-nmtf_Z_l", lambda, ".csv", sep = "")
file <- paste("result_wc_nmtf/lambda/p_tra/wc-nmtf_Z_l", lambda, "_p_tra.csv", sep = "")
res_wc_nmtf <- read.csv(file, header = TRUE)
res_wc_nmtf <- t( normalize( t(res_wc_nmtf) ) )
label_res <- apply(res_wc_nmtf, MARGIN = 1, FUN=which.max)
t_nmi <- NMI(label_res, labelK)
t_ari <- ARI(label_res, labelK)
cos_nmi <- c(cos_nmi, t_nmi)
cos_ari <- c(cos_ari, t_ari)
}
for(lambda in lambdas){
#file <- paste("result_wc_nmtf/lambda/cos/wc-nmtf_Z_l", lambda, ".csv", sep = "")
file <- paste("result_wc_nmtf/lambda/p_tra/wc-nmtf_Z_l", lambda, "_p_tra.csv", sep = "")
res_wc_nmtf <- read.csv(file, header = TRUE)
res_wc_nmtf <- t( normalize( t(res_wc_nmtf) ) )
label_res <- apply(res_wc_nmtf, MARGIN = 1, FUN=which.max)
t_nmi <- NMI(label_res, labelK)
t_ari <- ARI(label_res, labelK)
cos_nmi <- c(cos_nmi, t_nmi)
cos_ari <- c(cos_ari, t_ari)
}
temp = c(1:10)
matrix(c, nrow = 5)
matrix(temp, nrow = 5)
t <- Sys.time()
t2 <- Sys.time()
t2 - t
temp <- t2 - t
temp
plot(temp)
?dist
?svg
setwd("/media/matthieu/Data/Matthieu/##Etude/#M1/S2/TER/ter-sentiment-analysis")
library(aricode)
library(R.matlab)
library(skmeans)
library("FactoMineR")
library(NMF)
normalize <- function(x) {x / sqrt(rowSums(x^2))}
normalizeByCol <- function(df) { t( normalize( t(df) ) )}
sent_process <- function(x){ x[1] - x[2] + 1e-12 }
sent_process2 <- function(x){ if(x[1] > x[2]) {1}else{0}  }
# -------------- Dataset loading --------------
#X <- readMat("mat_files/output_30.csv_tf-idf-l2.mat")
#X <- readMat("mat_files/output_not_original_30.csv_bow.mat")
#X <- readMat("mat_files/output_not_original_30.csv_tf-idf.mat")
#X <- readMat("mat_files/output_not_original_30.csv_tf-idf-l2.mat")
#X <- readMat("mat_files/output_not_original_50.csv_tf-idf-l2.mat")
X <- readMat("mat_files/output_not_original_10.csv_tf-idf-l2.mat")
df <- X$X
dim(df)
mat_df <- as.matrix(df)
mat_df <- normalize(mat_df)
dim(mat_df)
label <- read.csv("mat_files/dataset_LABEL.csv", header = FALSE)
k <- 5
labelK <- apply(label, MARGIN = 1, FUN=function(x) max(1, ceiling(x*k))) # true label (1 to k)
mode <- 0
#lambdas <- c("10000.0", "1000.0", "100.0", "10.0", "1.0", "0.1", "0.01", "0.001", "0.0001", "1e-05", "0.0")
#lambdas_name <- c("1e04", "1000", "100", "10", "1", "0.1", "0.01", "0.001", "1e-04", "1e-05", "0")
lambdas <- c("10000.0", "1000.0", "100.0", "10.0", "1.0", "0.1", "0.01", "0.001", "0.0001", "1e-05")
lambdas_name <- c("1e04", "1000", "100", "10", "1", "0.1", "0.01", "0.001", "1e-04", "1e-05")
lambdas <- rev(lambdas)
lambdas_name <- rev(lambdas_name)
cos_nmi <- c()
cos_ari <- c()
for(lambda in lambdas){
#if(mode == 0){
#file <- paste("result_wc_nmtf/lambda/cos/wc-nmtf_Z_l", lambda, ".csv", sep = "")
#} else {
#file <- paste("result_wc_nmtf/lambda/p_tra/wc-nmtf_Z_l", lambda, "_p_tra.csv", sep = "")
#}
file <- paste("result_temp/cos2/wc-nmtf_Z_l", lambda, ".csv", sep = "")
res_wc_nmtf <- read.csv(file, header = TRUE)
res_wc_nmtf <- t( normalize( t(res_wc_nmtf) ) )
label_res <- apply(res_wc_nmtf, MARGIN = 1, FUN=which.max)
t_nmi <- NMI(label_res, labelK)
#t_nmi <- NMI:NMI(label_res, labelK)
t_ari <- ARI(label_res, labelK)
cos_nmi <- c(cos_nmi, t_nmi)
cos_ari <- c(cos_ari, t_ari)
}
min <- min(min(cos_nmi), min(cos_ari))
max <- max(max(cos_nmi), max(cos_ari))
if(mode == 0){
svg(filename="nmi_ari_wcnmtf_cos.svg")
} else {
svg(filename="nmi_ari_wcnmtf_tra.svg")
}
plot(cos_nmi, type = "b", ylab = "", xlab = "Lambda", xaxt = "n", ylim = c(min , max))
lines(cos_ari, type= "b", pch = 2, lty = 4)
legend("topright",legend=c("NMI", "ARI"), lty = c(1,4), pch = 1:2)
axis(1, at=1:length(lambdas_name), labels=lambdas_name)
dev.off()
setwd("/media/matthieu/Data/Matthieu/##Etude/#M1/S2/DataScience/Fashion-MNIST")
library(aricode)
library(R.matlab)
library(skmeans)
library(aricode)
library(R.matlab)
library(skmeans)
normalize <- function(x) {x / sqrt(rowSums(x^2))}
normalizeByCol <- function(df) { t( normalize( t(df) ) )}
sent_process <- function(x){ x[1] - x[2] + 1 }
# -------------- Dataset loading --------------
# load image files
load_image_file = function(filename) {
ret = list()
f = file(filename, 'rb')
readBin(f, 'integer', n = 1, size = 4, endian = 'big')
n    = readBin(f, 'integer', n = 1, size = 4, endian = 'big')
nrow = readBin(f, 'integer', n = 1, size = 4, endian = 'big')
ncol = readBin(f, 'integer', n = 1, size = 4, endian = 'big')
x = readBin(f, 'integer', n = n * nrow * ncol, size = 1, signed = FALSE)
close(f)
data.frame(matrix(x, ncol = nrow * ncol, byrow = TRUE))
}
# load label files
load_label_file = function(filename) {
f = file(filename, 'rb')
readBin(f, 'integer', n = 1, size = 4, endian = 'big')
n = readBin(f, 'integer', n = 1, size = 4, endian = 'big')
y = readBin(f, 'integer', n = n, size = 1, signed = FALSE)
close(f)
y
}
# load images
train_x = load_image_file("dataset/train-images-idx3-ubyte")
test_x  = load_image_file("dataset/t10k-images-idx3-ubyte")
# load labels
train_y = as.factor(load_label_file("dataset/train-labels-idx1-ubyte"))
test_y = as.factor(load_label_file("dataset/t10k-labels-idx1-ubyte"))
train_xy = cbind(train_x, train_y)
test_xy = cbind(test_x, test_y)
label_col = 785
# ----------------------------------------
df <- read.csv("encoded_32_images.csv")
dim(df)
mat_df <- as.matrix(df)
mat_df <- normalize(mat_df)
dim(mat_df)
# ----------------------------------------
df <- read.csv("encoded_32_images.csv", row.names = 1)
dim(df)
mat_df <- as.matrix(df)
mat_df <- normalize(mat_df)
dim(mat_df)
k <- 10
print("run kmeans...")
res_kmeans <- kmeans(mat_df, centers = k)
NMI(res_kmeans$cluster, train_y)
ARI(res_kmeans$cluster, train_y)
res <- read.csv("KMeans_labels_32.csv")
dim(res)
res <- read.csv("KMeans_labels_32.csv", row.names = 1)
dim(res)
NMI(res, train_y)
res
train_y
as.factor(res)
as.factor(res[1,])
res
res[1]
res[1,]
res[,1]
unique(res)
res
unique(res)
?unique
NMI(res[1], train_y)
NMI(as.factor(res[1]), train_y)
res[1]
as.factor(res[1])
as.factor(res)
res <- unlist(res, use.names=FALSE)
res
NMi(res, train_y)
NMI(res, train_y)
library(sabre)
install.packages("sabre", dependencies = TRUE)
library(sabre)
install.packages("sf", dependencies = TRUE)
